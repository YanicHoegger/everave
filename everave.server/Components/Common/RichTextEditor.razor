@implements IDisposable
@inject IJSRuntime JS

<div>
    <div id="@EditorId"></div>
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private string EditorId { get; } = $"editor_{Guid.NewGuid()}";
    private DotNetObjectReference<RichTextEditor>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("EditorLib.InitializeEditor", EditorId, _dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnEditorDataChanged(string data)
    {
        Value = data;
        await ValueChanged.InvokeAsync(data);
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
        _dotNetRef = null;
    }
}
