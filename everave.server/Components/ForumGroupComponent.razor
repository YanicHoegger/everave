@using everave.server.Forum
@using Microsoft.AspNetCore.Components.Authorization
@using MongoDB.Bson
@inject IForumService ForumService
@inject AuthenticationStateProvider AuthProvider

@if (forums == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@ForumGroup?.Description</h5>
            @if (isAdmin)
            {
                <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-light me-2" @onclick="ToggleNewForumForm">+</button>
                    <Delete Title="Gruppe löschen"
                            Message="Möchten Sie die Gruppe wirklich löschen?"
                            OnDeleteConfirmed="DeleteGroup" />
                </div>
            }
        </div>
        <div class="card-body p-0">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th style="width: 15%;">Topics</th>
                        <th style="width: 15%;">Entries</th>
                        <th style="width: 25%;">Letzter Beitrag</th>
                        @if (isAdmin)
                        {
                            <th style="width: 50px;" />
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forum in forums)
                    {
                        <tr>
                            <td>
                                <a href="@($"/forum/{forum.Forum.Id}")" class="fw-bold text-decoration-none">
                                    @forum.Forum.Name
                                </a><br />
                                <small class="text-muted">@forum.Forum.Description</small>
                            </td>
                            <td>@forum.Forum.NumberOfTopics</td>
                            <td>@forum.Forum.NumberOfEntries</td>
                            <td>
                                @if (forum.LastEntryDetails != null)
                                {
                                    <div>
                                        <strong>@forum.LastEntryDetails.TopicTitle</strong><br />
                                        <small class="text-muted">
                                            @forum.LastEntryDetails.CreatedAt.ToString("g") by <UserLink UserId="@forum.LastEntryDetails.Author.ToString()"/>
                                        </small>
                                    </div>
                                }
                                else
                                {
                                    <small class="text-muted">No entries yet</small>
                                }
                            </td>
                            @if (isAdmin)
                            {
                                <td>
                                    <Delete Title="Forum löschen"
                                            Message="Möchten Sie dieses Forum wirklich löschen?"
                                            OnDeleteConfirmed="() => DeleteForum(forum.Forum)" />
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (showNewForumForm)
        {
            <EditForm EditContext="editContext" OnValidSubmit="AddForum">
                <DataAnnotationsValidator />

                <fieldset class="border rounded p-3">
                    <legend class="float-none fs-6 text-secondary mb-0 px-2">Neues Forum erstellen</legend>

                    <div class="row align-items-end g-2">
                        <div class="col">
                            <label for="forumName" class="form-label">Name</label>
                            <InputText id="forumName" @bind-Value="Model!.Name" class="form-control" />
                            <ValidationMessage For="() => Model!.Name" />
                        </div>

                        <div class="col">
                            <label for="forumDescription" class="form-label">Beschreibung</label>
                            <InputText id="forumDescription" @bind-Value="Model!.Description" class="form-control" />
                            <ValidationMessage For="() => Model!.Description" />
                        </div>

                        <div class="col-auto">
                            <button type="submit" class="btn btn-success">Hinzufügen</button>
                        </div>
                    </div>
                </fieldset>
            </EditForm>
        }
    </div>
}

@code {
    [Parameter] public EventCallback<ForumGroup> OnGroupDeleted { get; set; }

    private List<ForumDisplay>? forums;

    private EditContext? editContext;
    [SupplyParameterFromForm]
    private NewForum? Model { get; set; }
    private ValidationMessageStore? messageStore;

    [Parameter] public ForumGroup? ForumGroup { get; set; }

    private bool isAdmin;
    private bool showNewForumForm = false;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        await CheckIfAdmin();
        await LoadData();
    }

    private async Task CheckIfAdmin()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.Identity?.IsAuthenticated == true && user.IsInRole("Admin");
    }

    private async Task LoadData()
    {
        forums = (await ForumService.GetForumsByGroupIdAsync(ForumGroup?.Id ?? default).ConfigureAwait(false))
            .Select(x => new ForumDisplay
                {
                    Forum = x,
                    LastEntryDetails = x.LastEntry != null
                                ? CreateLastEntryDetails(x).Result
                                : null
                }).ToList();

        await InvokeAsync(() =>
        {
            Model = new NewForum();
            editContext = new EditContext(Model);
            showNewForumForm = false;
            StateHasChanged();
        });
    }

    private async Task<LastEntryDetails> CreateLastEntryDetails(Forum forum)
    {
        var lastEntry = await ForumService.GetEntryById((ObjectId)forum.LastEntry!).ConfigureAwait(false);
        var topic = await ForumService.GetTopicByIdAsync(lastEntry.TopicId).ConfigureAwait(false);
    
        return new LastEntryDetails
            {
                TopicTitle = topic.Title,
                CreatedAt = lastEntry.CreatedAt,
                Author = lastEntry.UserId
            };
    }

    private async Task AddForum()
    {
        var forum = new Forum
            {
                Description = Model!.Description,
                Name = Model!.Name,
                GroupId = ForumGroup!.Id
            };
        await ForumService.AddForumAsync(forum).ConfigureAwait(false);

        await LoadData();
    }

    private void ToggleNewForumForm()
    {
        showNewForumForm = !showNewForumForm;
    }

    private async Task DeleteGroup()
    {
        if (ForumGroup != null)
        {
            await ForumService.DeleteForumGroupAsync(ForumGroup).ConfigureAwait(false);
            await OnGroupDeleted.InvokeAsync(ForumGroup);
        }
    }

    private void HandleValidationRequested(object? sender,
       ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (string.IsNullOrWhiteSpace(Model!.Name))
        {
            messageStore?.Add(() => Model.Name, "Forum name cannot be empty.");
        }

        var exists = forums!.Any(g => string.Equals(g.Forum.Name, Model!.Name, StringComparison.OrdinalIgnoreCase));

        if (exists)
        {
            messageStore?.Add(() => Model.Name, "A forum with that name already exists.");
        }

        if (string.IsNullOrWhiteSpace(Model!.Description))
        {
            messageStore?.Add(() => Model.Description, "Forum description cannot be empty.");
        }
    }

    public class ForumDisplay
    {
        public Forum Forum { get; set; } = new();
        public LastEntryDetails? LastEntryDetails { get; set; }
    }

    public class LastEntryDetails
    {
        public string TopicTitle { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public ObjectId Author { get; set; }
    }

    public class NewForum
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    private async Task DeleteForum(Forum forum)
    {
        await ForumService.DeleteForumAsync(forum).ConfigureAwait(false);
        await LoadData();
    }
}
