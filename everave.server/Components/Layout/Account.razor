@using Microsoft.AspNetCore.Components.Authorization
@using everave.server.Components.Common
@using everave.server.UserManagement
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="d-flex align-items-center position-relative">
    <button class="btn btn-outline-primary rounded-circle" @onclick="TogglePopup" style="width: 40px; height: 40px;" id="account-button">
        <i class="bi bi-person"></i> 
    </button>

    @if (isPopupVisible)
    {
        <div class="popup-container shadow p-3 bg-white rounded" id="account-popup" @onclick:stopPropagation>
            <AuthorizeView>
                <Authorized>
                    <span class="me-2">Angemeldet als <UserLink UserId="@userIdentity"></UserLink></span>
                    <form action="/auth/logout" method="post" style="display:inline;">
                        <AntiforgeryToken />
                        <button type="submit" class="btn btn-outline-danger btn-sm">Logout</button>
                    </form>
                </Authorized>

                <NotAuthorized Context="authContext">
                    <form action="@($"/auth/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}")" method="post">
                        <AntiforgeryToken />
                        <div class="d-flex align-items-end flex-wrap gap-2">
                            <div>
                                <input id="UserName" name="UserName" class="form-control form-control-sm"
                                       placeholder="Benutzername" required />
                            </div>

                            <div>
                                <input id="Password" name="Password" class="form-control form-control-sm"
                                       type="password" placeholder="Passwort" required />
                            </div>

                            <div class="form-check small align-self-center ms-1">
                                <input id="IsPersistent" name="IsPersistent" type="checkbox" class="form-check-input" />
                                <label class="form-check-label" for="IsPersistent">Merken</label>
                            </div>

                            <button type="submit" class="btn btn-sm btn-primary">Login</button>
                        </div>
                    </form>
                    <a href="/register" class="btn btn-link btn-sm" @onclick="TogglePopup">Registrieren</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    }
</div>

@code {
    private bool isPopupVisible = false;
    private string? userIdentity;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    private void TogglePopup()
    {
        isPopupVisible = !isPopupVisible;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register a click event listener to detect clicks outside the popup
            await JSRuntime.InvokeVoidAsync("registerOutsideClickHandler",
                DotNetObjectReference.Create(this),
                "#account-popup",
                "#account-button");
        }

        await CheckUser();
    }

    [JSInvokable]
    public void ClosePopup()
    {
        isPopupVisible = false;
        StateHasChanged();
    }

    private async Task CheckUser()
    {
        userIdentity = (await AuthProvider.GetUserId())?.ToString();
    }
}