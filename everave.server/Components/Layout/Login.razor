@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <span class="me-2">Angemeldet als <strong>@userName</strong></span>
        <form action="/auth/logout" method="post" style="display:inline;">
            <AntiforgeryToken />
            <button type="submit" class="btn btn-outline-danger btn-sm">Logout</button>
        </form>
    </Authorized>

    <NotAuthorized Context="authContext">
        <form action="@($"/auth/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}")" method="post">
            <AntiforgeryToken />
            <div class="d-flex align-items-end flex-wrap gap-2">
                <div>
                    <input id="UserName" name="UserName" class="form-control form-control-sm"
                           placeholder="Benutzername" required />
                </div>

                <div>
                    <input id="Password" name="Password" class="form-control form-control-sm"
                           type="password" placeholder="Passwort" required />
                </div>

                <div class="form-check small align-self-center ms-1">
                    <input id="IsPersistent" name="IsPersistent" type="checkbox" class="form-check-input" />
                    <label class="form-check-label" for="IsPersistent">Merken</label>
                </div>

                <button type="submit" class="btn btn-sm btn-primary">Login</button>

                <a href="/register" class="btn btn-link btn-sm">Registrieren</a>
            </div>
        </form>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        await CheckUser();
    }

    private async Task CheckUser()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
        }
    }
}
