@page "/forum/{id}"
@using everave.server.Forum
@using MongoDB.Bson
@inject IForumService ForumService

<h3>@forum?.Name</h3>

@if (topics == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Thema</h5>
        </div>
        <div class="card-body p-0">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th style="width: 15%;">Entries</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in topics)
                    {
                        <tr>
                            <td>
                                <a href="@($"/topic/{topic.Id}")" class="fw-bold text-decoration-none">
                                    @topic.Title
                                </a><br />
                                <small class="text-muted">@topic.CreatedAt</small>
                            </td>
                            <td>@topic.NumberOfEntries</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <EditForm EditContext="editContext" OnValidSubmit="AddTopic" formname="add-topic-form">
            <DataAnnotationsValidator />

            <fieldset class="border rounded p-3">
                <legend class="float-none fs-6 text-secondary mb-0 px-2">Neues Thema erstellen</legend>

                <div class="row align-items-end g-2">
                    <div class="col">
                        <label for="forumGroupName" class="form-label">Name</label>
                        <InputText id="forumGroupName" @bind-Value="Model!.Title" class="form-control" />
                        <ValidationMessage For="() => Model!.Title" />
                    </div>

                    <div class="col-auto">
                        <button type="submit" class="btn btn-success">Hinzufügen</button>
                    </div>
                </div>
            </fieldset>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; } = default!;

    private Forum? forum;
    private List<Topic>? topics;

    private EditContext? editContext;
    [SupplyParameterFromForm]
    private NewTopic? Model { get; set; }
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        var forumId = ForumId;
        forum = await ForumService.GetForumAsync(forumId);
        topics = await ForumService.GetTopicsByForumIdAsync(forumId);
    }

    private ObjectId ForumId => new(id);

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        var title = Model!.Title;
        if (string.IsNullOrWhiteSpace(title))
        {
            messageStore?.Add(() => Model.Title, "Group name cannot be empty.");
        }

        var exists = topics!.Any(g => string.Equals(g.Title, title, StringComparison.OrdinalIgnoreCase));

        if (exists)
        {
            messageStore?.Add(() => Model.Title, "A group with that name already exists.");
        }
    }

    private async Task AddTopic()
    {
        var topic = new Topic()
            {
                Title = Model!.Title,
                CreatedAt = DateTime.Now,
                ForumId = ForumId
            //TODO: add user
            };
        await ForumService.AddTopicAsync(topic).ConfigureAwait(false);
        topics = await ForumService.GetTopicsByForumIdAsync(ForumId);

        await InvokeAsync(() =>
        {
            Model = new NewTopic();
            editContext = new EditContext(Model);
            StateHasChanged();
        });
    }

    public class NewTopic
    {
        public string Title { get; set; } = string.Empty;
    }
}