@page "/forum/{id}/{page?}"
@rendermode InteractiveServer
@using everave.server.Forum
@using everave.server.UserManagement
@using MongoDB.Bson
@using Microsoft.AspNetCore.Components.Authorization
@using everave.server.Components.Common
@inject IForumService ForumService
@inject NavigationManager NavigationManager

@if (topics == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@forum?.Name</h5>
            <AuthorizeView>
                <button class="btn btn-sm btn-light" @onclick="NavigateToAddTopic">Neues Thema</button>
            </AuthorizeView>
            <PageNavigation BaseUrl="@($"/forum/{id}")" CurrentPage="@GetCurrentPage()" TotalPages="@totalPages" />
        </div>
        <div class="card-body p-0">
            <table class="table table-hover mb-0 forum-topics-table">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th style="width: 10%;">Beiträge</th>
                        <th style="width: 30%;">Letzter Beitrag</th>
                        <AuthorizeView Roles="@ApplicationUser.AdminRole">
                            <th style="width: 50px" />
                        </AuthorizeView>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in topics)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items">
                                    <div>
                                        <a href="@($"/topic/{topic.Topic.Id}")" class="fw-bold text-decoration-none">
                                            @topic.Topic.Title
                                        </a><br />
                                        <small class="text-muted">@topic.Topic.CreatedAt</small>
                                    </div>
                                    <div class="ms-auto">
                                        <PageNavigation BaseUrl="@($"/topic/{topic.Topic.Id}")"
                                                        CurrentPage="1"
                                                        TotalPages="@(GetNumberOfPages(topic.Topic))"
                                                        DisableNavigationToCurrent="false" />
                                    </div>
                                </div>
                            </td>
                            <td>@topic.Topic.NumberOfEntries</td>
                            <td>
                                <LastEntryDetails EntryId="@(topic.Topic.LastEntry)" ShowTopic="false" />
                            </td>
                            <AuthorizeView Roles="@ApplicationUser.AdminRole">
                                <Delete Title="Thema löschen"
                                        Message="Möchten Sie dieses Forum wirklich löschen?"
                                        OnDeleteConfirmed="() => DeleteTopic(topic.Topic)" />
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; } = default!;
    [Parameter]
    public string? page { get; set; }

    private int totalPages;

    private Forum? forum;
    private List<TopicDisplay>? topics;

    protected override async Task OnInitializedAsync()
    {
        forum = await ForumService.GetForumAsync(ForumId);
        topics = (await ForumService.GetTopicsByForumIdAsync(ForumId, GetCurrentPage()))
            .Select(x => new TopicDisplay
                {
                    Topic = x,
                    LastEntry = x.LastEntry
                }).ToList();

        var totalEntries = forum.NumberOfTopics;
        totalPages = (int)Math.Ceiling((double)totalEntries / ForumService.PageSize);
    }

    private ObjectId ForumId => new(id);

    private void NavigateToAddTopic()
    {
        NavigationManager.NavigateTo($"/forum/{id}/add-topic");
    }

    private async Task DeleteTopic(Topic topic)
    {
        await ForumService.DeleteTopicAsync(topic).ConfigureAwait(false);
        await OnInitializedAsync().ConfigureAwait(false);
    }

    public class TopicDisplay
    {
        public Topic Topic { get; set; } = new();
        public ObjectId? LastEntry { get; set; }
    }

    private int GetNumberOfPages(Topic topic)
    {
        return (int)Math.Ceiling(topic.NumberOfEntries / (double)ForumService.PageSize);
    }

    private int GetCurrentPage()
    {
        if (page != null && int.TryParse(page, out var parsedPage))
        {
            return parsedPage;
        }

        return 1;
    }
}
