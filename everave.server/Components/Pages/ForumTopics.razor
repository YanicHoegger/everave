@page "/forum/{id}"
@rendermode InteractiveServer
@using everave.server.Forum
@using everave.server.UserManagement
@using MongoDB.Bson
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject IForumService ForumService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

@if (topics == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@forum?.Name</h5>
            <AuthorizeView>
                <button class="btn btn-sm btn-light" @onclick="NavigateToAddTopic">Neues Thema</button>
            </AuthorizeView>
        </div>
        <div class="card-body p-0">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th style="width: 15%;">Anzahl Beiträge</th>
                        <th style="width: 25%;">Letzter Beitrag</th>
                        <AuthorizeView Roles="@ApplicationUser.AdminRole">
                            <th style="width: 50px" />
                        </AuthorizeView>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var topic in topics)
                    {
                        <tr>
                            <td>
                                <a href="@($"/topic/{topic.Topic.Id}")" class="fw-bold text-decoration-none">
                                    @topic.Topic.Title
                                </a><br />
                                <small class="text-muted">@topic.Topic.CreatedAt</small>
                            </td>
                            <td>@topic.Topic.NumberOfEntries</td>
                            <td>
                                @if (topic.LastEntryDetails != null)
                                {
                                    <div>
                                        <small class="text-muted">
                                            @topic.LastEntryDetails.CreatedAt.ToString("g") by @topic.LastEntryDetails.Author
                                        </small>
                                    </div>
                                }
                                else
                                {
                                    <small class="text-muted">No entries yet</small>
                                }
                            </td>
                            <AuthorizeView Roles="@ApplicationUser.AdminRole">
                                <Delete Title="Thema löschen"
                                        Message="Möchten Sie dieses Forum wirklich löschen?"
                                        OnDeleteConfirmed="() => DeleteTopic(topic.Topic)" />
                            </AuthorizeView>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public string id { get; set; } = default!;

    private Forum? forum;
    private List<TopicDisplay>? topics;

    protected override async Task OnInitializedAsync()
    {
        forum = await ForumService.GetForumAsync(ForumId);
        topics = (await ForumService.GetTopicsByForumIdAsync(ForumId))
            .Select(x => new TopicDisplay()
                {
                    Topic = x,
                    LastEntryDetails = x.LastEntry != null ? CreateLastEntryDetails(x).Result : null
                }).ToList();
    }

    private ObjectId ForumId => new(id);

    private async Task<LastEntryDetails> CreateLastEntryDetails(Topic topic)
    {
        var lastEntry = await ForumService.GetEntryById((ObjectId)topic.LastEntry!);
        var user = await UserManager.FindByIdAsync(lastEntry.UserId.ToString());

        return new LastEntryDetails
            {
                CreatedAt = lastEntry.CreatedAt,
                Author = user?.UserName ?? string.Empty
            };
    }

    private void NavigateToAddTopic()
    {
        NavigationManager.NavigateTo($"/forum/{id}/add-topic");
    }

    private async Task DeleteTopic(Topic topic)
    {
        await ForumService.DeleteTopicAsync(topic).ConfigureAwait(false);
        await OnInitializedAsync().ConfigureAwait(false);
    }

    public class TopicDisplay
    {
        public Topic Topic { get; set; } = new();
        public LastEntryDetails? LastEntryDetails { get; set; }
    }

    public class LastEntryDetails
    {
        public DateTime CreatedAt { get; set; }
        public string Author { get; set; } = string.Empty;
    }
}
