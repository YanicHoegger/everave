@page "/topic/{id}/{page?}"
@rendermode InteractiveServer
@using everave.server.Forum
@using everave.server.UserManagement
@using MongoDB.Bson
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using everave.server.Components.Common
@inject IForumService ForumService
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (entries == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card sticky-top">
        <div class="card-header bg-primary text-white  d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@topicTitle</h5>
            <AuthorizeView>
                @if (!isAdding)
                {
                    <button class="btn btn-sm btn-light" @onclick="AddEntry">Antworten</button>
                }
            </AuthorizeView>
            <PageNavigation BaseUrl="@($"/topic/{id}")" CurrentPage="@GetCurrentPage()" TotalPages="@totalPages" />
        </div>
    </div>
    <div class="overflow-auto" style="max-height: calc(100vh - 140px);">

        @foreach (var entry in entries)
        {
            <a id="@entry.EntryId">
                <div class="entry-card d-flex mb-4">
                    <!-- Creator Information -->
                    <div class="creator-info text-center me-3">
                        <img src="@entry.CreatorProfilePictureUrl" alt="Profile Picture" class="profile-picture mb-2" />
                        <p class="creator-name">@entry.CreatorName</p>
                    </div>

                    <!-- Post Content -->
                    <div class="entry-content flex-grow-1">
                        <div class="entry-header text-muted mb-2">
                            <small>Erstellt am: @entry.CreatedAt.PrintCET()</small>
                        </div>
                        <div class="entry-body ck-content">
                            @((MarkupString)entry.HtmlContent)
                        </div>
                    </div>
                </div>
            </a>
        }

        @if (isAdding)
        {
            <div class="editor">
                <RichTextEditor @bind-Value="newContent" />
                <button class="btn btn-success mt-2" @onclick="SaveEntry">Speichern</button>
            </div>
            <div id="@RichTextEditorScrollId"></div>
        }
    </div>
}

@code {
    private const string RichTextEditorScrollId = "richTextEditorScroll";

    [Parameter]
    public string id { get; set; } = default!;
    [Parameter]
    public string? page { get; set; }

    private int totalPages;

    private string topicTitle;
    private List<EntryDisplay>? entries;
    private bool isAdding = false;
    private bool needsScrolling = true;
    private string newContent = string.Empty;
    private string selectedEntryId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        topicTitle = (await ForumService.GetTopicByIdAsync(new ObjectId(id)).ConfigureAwait(false)).Title;
        var rawEntries = await ForumService.GetPostsByTopicIdAsync(new ObjectId(id), GetCurrentPage()).ConfigureAwait(false);
        entries = [];

        foreach (var entry in rawEntries)
        {
            var user = await UserManager.FindByIdAsync(entry.UserId.ToString()).ConfigureAwait(false);
            entries.Add(new EntryDisplay
                {
                    HtmlContent = entry.HtmlContent,
                    CreatedAt = entry.CreatedAt,
                    CreatorName = user?.UserName ?? "Unknown",
                    CreatorProfilePictureUrl = user.GetProfilePictureUrl(),
                    EntryId = entry.Id.ToString()
                });
        }

        if (rawEntries.Any())
        {
            var totalEntries = (await ForumService.GetTopicByIdAsync(rawEntries.First().TopicId).ConfigureAwait(false)).NumberOfEntries;
            totalPages = (int)Math.Ceiling((double)totalEntries / ForumService.PageSize);
        }

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("isAdding", out var isAddingValue) && bool.TryParse(isAddingValue, out var isAddingResult))
        {
            isAdding = isAddingResult;
        }

        if (!string.IsNullOrEmpty(uri.Fragment))
        {
            selectedEntryId = uri.Fragment.TrimStart('#');
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender).ConfigureAwait(false);

        if (isAdding && needsScrolling)
        {
            needsScrolling = false;
            await JSRuntime.InvokeVoidAsync("scrollToElement", RichTextEditorScrollId).ConfigureAwait(false);
        }
        else if (!string.IsNullOrEmpty(selectedEntryId) && needsScrolling)
        {
            needsScrolling = false;
            await JSRuntime.InvokeVoidAsync("scrollToElement", selectedEntryId).ConfigureAwait(false);
        }
    }

    private async Task SaveEntry()
    {
        if (!string.IsNullOrWhiteSpace(newContent))
        {
            var post = new Post
                {
                    HtmlContent = newContent,
                    CreatedAt = DateTime.Now,
                    TopicId = new ObjectId(id),
                    UserId = (ObjectId)(await AuthProvider.GetUserId())!
                };
            await ForumService.AddPostAsync(post);

            var user = await UserManager.FindByIdAsync(post.UserId.ToString());
            entries!.Add(new EntryDisplay
                {
                    HtmlContent = post.HtmlContent,
                    CreatedAt = post.CreatedAt,
                    CreatorName = user?.UserName ?? "Unknown",
                    CreatorProfilePictureUrl = user.GetProfilePictureUrl()
                });

            newContent = string.Empty;
            isAdding = false;
        }
    }

    private void AddEntry()
    {
        var currentPage = GetCurrentPage();
        if (currentPage != totalPages)
        {
            needsScrolling = false;
            NavigationManager.NavigateTo($"/topic/{id}/{totalPages}?isAdding=true");
        }
        else
        {
            needsScrolling = true;
            isAdding = true;
            StateHasChanged();
        }
    }

    private class EntryDisplay
    {
        public string HtmlContent { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public string CreatorName { get; set; } = string.Empty;
        public string CreatorProfilePictureUrl { get; set; } = string.Empty;
        public string EntryId { get; set; } = string.Empty;
    }

    private int GetCurrentPage()
    {
        if (page != null && int.TryParse(page, out var parsedPage))
        {
            return parsedPage;
        }

        return 1;
    }

}
